
==================== FINAL INTERFACE ====================
2017-12-05 04:16:19.140235 UTC

interface Haskell-Sudoku-Solver-0.1.0.0-3SDgj9MtqcG3Zn0p64G26E:Sudoku 8002
  interface hash: 530334e28be812e5a9f155d203f8e5ef
  ABI hash: 76cb13fe79548c2dde92962834079c15
  export-list hash: fce7e2969342a0ec226702dbfc1bcde4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a9957a40eee49c0a1426ab2fb7ebe2b2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Sudoku.checkCells
  Sudoku.checkCols
  Sudoku.checkRows
  Sudoku.emptyBoard
  Sudoku.isValid
  Sudoku.solveBoard
  Sudoku.Board{Sudoku.Board board valid}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
214fe166bc066cb55b0971252e1a7bbd
  $fShowBoard :: GHC.Show.Show Sudoku.Board
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Sudoku.Board
                  Sudoku.$fShowBoard_$cshowsPrec
                  Sudoku.$fShowBoard_$cshow
                  Sudoku.$fShowBoard_$cshowList -}
214fe166bc066cb55b0971252e1a7bbd
  $fShowBoard1 :: Sudoku.Board -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Sudoku.Board) ->
                 case w of ww { Sudoku.Board ww1 ww2 ->
                 Sudoku.$w$cshowsPrec 0# ww1 ww2 }) -}
214fe166bc066cb55b0971252e1a7bbd
  $fShowBoard_$cshow :: Sudoku.Board -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Sudoku.Board) ->
                 Sudoku.$fShowBoard_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
214fe166bc066cb55b0971252e1a7bbd
  $fShowBoard_$cshowList :: [Sudoku.Board] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Sudoku.Board
                   Sudoku.$fShowBoard1) -}
214fe166bc066cb55b0971252e1a7bbd
  $fShowBoard_$cshowsPrec ::
    GHC.Types.Int -> Sudoku.Board -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Sudoku.Board) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Sudoku.Board ww3 ww4 ->
                 Sudoku.$w$cshowsPrec ww1 ww3 ww4 } }) -}
29ce682ea55f5c747951b1ad990bcc2e
  $tc'Board :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9094494231751733812##
                   5042958110878442431##
                   Sudoku.$trModule
                   Sudoku.$tc'Board1) -}
051e2c93eeb095e98e6482d3b9541f4f
  $tc'Board1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Board"#) -}
05ad7e4691cd9453464611d45530c0ab
  $tcBoard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13824082366192723040##
                   18160296076592645750##
                   Sudoku.$trModule
                   Sudoku.$tcBoard1) -}
e327e5cb698127938fc2957624c920ec
  $tcBoard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Board"#) -}
350625e883a67a40973fb996862f1199
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Sudoku.$trModule2
                   Sudoku.$trModule1) -}
94b10d229503706280118a9e75ea5d33
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Sudoku"#) -}
b2e4c9f1e8e095ca305e5bd6c710dedc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Haskell-Sudoku-Solver-0.1.0.0-3SDgj9MtqcG3Zn0p64G26E"#) -}
20beae924fdc3cfdc0f713fff68128fa
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [[GHC.Base.Maybe GHC.Types.Int]]
    -> GHC.Base.Maybe GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0] -}
446fce58ed93346c25c67f7aed010245
  $wboardSolver ::
    [[GHC.Base.Maybe GHC.Types.Int]]
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# [[GHC.Base.Maybe GHC.Types.Int]],
          GHC.Base.Maybe GHC.Types.Bool #)
  {- Arity: 3, Strictness: <L,U><S,U><L,1*U(U)>, Inline: [0] -}
d2ba37a03896014b0d5e4916a331ea33
  $wcheckCells ::
    [[GHC.Base.Maybe GHC.Types.Int]]
    -> GHC.Prim.Int# -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><S,U><L,1*U(U)>, Inline: [0] -}
c90793b35b7a1cc1f5ef893796887d9c
  $wcheckCols ::
    [[GHC.Base.Maybe GHC.Types.Int]] -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
c743e8d857cf6ff6798f2cacd9bace3e
  $wcheckRows ::
    [[GHC.Base.Maybe GHC.Types.Int]] -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
214fe166bc066cb55b0971252e1a7bbd
  data Board
    = Board {board :: [[GHC.Base.Maybe GHC.Types.Int]],
             valid :: GHC.Base.Maybe GHC.Types.Bool}
9bfb68d2a60315395666002ae64ba18d
  board :: Sudoku.Board -> [[GHC.Base.Maybe GHC.Types.Int]]
  RecSel Left Sudoku.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Sudoku.Board) ->
                 case ds of wild { Sudoku.Board ds1 ds2 -> ds1 }) -}
c73bb2b1021a1126c0781c46fafb4cca
  checkCells ::
    [[GHC.Base.Maybe GHC.Types.Int]]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U><S(S),1*U(U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [[GHC.Base.Maybe GHC.Types.Int]])
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Sudoku.$wcheckCells w ww1 w2 }) -}
00138599ede63661837fbf97de4b1d8c
  checkCols ::
    [[GHC.Base.Maybe GHC.Types.Int]] -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [[GHC.Base.Maybe GHC.Types.Int]]) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Sudoku.$wcheckCols w ww1 }) -}
a3de61238e88c58979e8e67826ccf375
  checkRows ::
    [[GHC.Base.Maybe GHC.Types.Int]] -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [[GHC.Base.Maybe GHC.Types.Int]]) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Sudoku.$wcheckRows w ww1 }) -}
b3eb65284c0e4090de601fec406971ad
  emptyBoard :: Sudoku.Board
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Sudoku.Board Sudoku.emptyBoard2 Sudoku.emptyBoard1) -}
6703b27809e29ef0bbff2bbdf2d64dc6
  emptyBoard1 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.True) -}
3c92674fb9bcefde7b7d1fdc432c8c83
  emptyBoard10 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   (GHC.Types.[] @ [GHC.Base.Maybe GHC.Types.Int])) -}
28fcd89afde88f8ab0e1b4ab22a30252
  emptyBoard11 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Sudoku.emptyBoard12) -}
b85a7c6cccca7982752b882e8611aca1
  emptyBoard12 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Sudoku.emptyBoard13) -}
8fb4c9a5aa3e0f408d0718228666e11d
  emptyBoard13 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Sudoku.emptyBoard14) -}
fcab9a03ff19644f4468483451c64361
  emptyBoard14 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Sudoku.emptyBoard15) -}
27497425a9ea08fc19886824d71ace5a
  emptyBoard15 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Sudoku.emptyBoard16) -}
a9155b057d86e35a7770aa3c3f9a3018
  emptyBoard16 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Sudoku.emptyBoard17) -}
0aaca8803620b15819f7cb8540d6ae25
  emptyBoard17 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Sudoku.emptyBoard18) -}
5eb367c86e4b6fc2e44aa8c09d3278c0
  emptyBoard18 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Sudoku.emptyBoard19) -}
fb5e6940a357b7c893de56fca09e5829
  emptyBoard19 :: [GHC.Base.Maybe GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Types.[] @ (GHC.Base.Maybe GHC.Types.Int))) -}
312e6f3dd6d3e7d5155a3023bbd86fa6
  emptyBoard2 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   Sudoku.emptyBoard3) -}
5831c65e850c2c9c58ebd4743ecd2754
  emptyBoard3 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   Sudoku.emptyBoard4) -}
5810631e38b87093d1c8b3b373745780
  emptyBoard4 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   Sudoku.emptyBoard5) -}
aa27156a09839c99025574f419e36865
  emptyBoard5 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   Sudoku.emptyBoard6) -}
afd26d2e9a0834bad5bdbb4234abc6af
  emptyBoard6 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   Sudoku.emptyBoard7) -}
e5ac08d89eda8925e2f65cc59c64f486
  emptyBoard7 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   Sudoku.emptyBoard8) -}
9e51482c47850845cc42b0bab4be3e27
  emptyBoard8 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   Sudoku.emptyBoard9) -}
b7f3d29509fecad61d70997506ce856c
  emptyBoard9 :: [[GHC.Base.Maybe GHC.Types.Int]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Base.Maybe GHC.Types.Int]
                   Sudoku.emptyBoard11
                   Sudoku.emptyBoard10) -}
c853928475f9d01394caa1e560106da9
  isValid :: [[GHC.Base.Maybe GHC.Types.Int]] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (b :: [[GHC.Base.Maybe GHC.Types.Int]]) ->
                 case Sudoku.$wcheckRows b 9# of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Sudoku.$wcheckCols b 9# of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> Sudoku.$wcheckCells b 9# Sudoku.isValid1 } }) -}
e13661b779738459112047dfdab6fecd
  isValid1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
766df3342db195a59245aebe496192eb
  solveBoard :: Sudoku.Board -> Sudoku.Board
  {- Arity: 1, Strictness: <S,1*U(U,A)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Sudoku.Board) ->
                 case w of ww { Sudoku.Board ww1 ww2 ->
                 let {
                   ds :: Sudoku.Board
                   = case Sudoku.$wboardSolver
                            ww1
                            0#
                            Sudoku.solveBoard2 of ww3 { (#,#) ww4 ww5 ->
                     Sudoku.Board ww4 ww5 }
                 } in
                 let {
                   newB :: [[GHC.Base.Maybe GHC.Types.Int]]
                   = case ds of wild { Sudoku.Board newB1 t2 -> newB1 }
                 } in
                 case Sudoku.isValid newB of wild {
                   GHC.Types.False -> Sudoku.Board ww1 Sudoku.solveBoard1
                   GHC.Types.True
                   -> Sudoku.Board
                        newB
                        (case ds of wild1 { Sudoku.Board newB1 t2 -> t2 }) } }) -}
09fa031d8636accc4046b448a0691ec4
  solveBoard1 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.False) -}
f504a1fc918a8c853736e87f2aa83e2f
  solveBoard2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b0e22d0ac07f725ba6e0cde3cac70eb0
  valid :: Sudoku.Board -> GHC.Base.Maybe GHC.Types.Bool
  RecSel Left Sudoku.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Sudoku.Board) ->
                 case ds of wild { Sudoku.Board ds1 ds2 -> ds2 }) -}
instance [safe] GHC.Show.Show [Sudoku.Board] = Sudoku.$fShowBoard
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

